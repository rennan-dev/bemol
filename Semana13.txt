Como a Web funciona no contexto de microsserviços?
Explique brevemente o funcionamento da Web e como esse conceito se relaciona à arquitetura de microsserviços.
R: A Web funciona como um sistema de comunicação entre clientes(navegadores) e servidores que armazenam e entregam conteúdo. Quando um usuário solicita uma página, o navegador envia uma requisição HTTP ao servidor, que responde com os dados necessários, geralmente em formato HTML. 
No contexto de microsserviços, essa arquitetura permite que aplicações sejam divididas em serviços menores e independentes, cada um responsável por uma funcionalidade específica. Assim, cada microsserviço pode ser desenvolvido, escalado e mantido separadamente, melhorando a flexibilidade e a eficiência do sistema como um todo

Quais são as desvantagens de arquiteturas monolíticas que podem motivar a adoção de microsserviços?
Descreva duas desvantagens de arquiteturas monolíticas tradicionais que podem ser resolvidas com a transição para microsserviços.
R: Duas desvantagens significativas das arquiteturas monolíticas que motivam a adoção de microsserviços são:
1. Dificuldade de Escalabilidade: Em sistemas monolíticos, escalar uma aplicação inteira é necessário mesmo que apenas uma parte precise de mais recursos. Isso pode ser ineficiente e caro, dificultando a resposta a demandas variáveis.
2. Manutenção Complexa: À medida que o código cresce, alterações em um componente podem impactar outros, tornando a manutenção mais difícil e arriscada. Isso aumenta o tempo de desenvolvimento e a probabilidade de falhas.

O que são microsserviços?
Defina o que são microsserviços e como eles diferem de uma arquitetura monolítica.
R: Microsserviços são uma abordagem arquitetônica que divide aplicações em pequenos serviços independentes, cada um responsável por uma função específica. Diferentemente da arquitetura monolítica, onde todos os componentes estão interligados em uma única unidade, os microsserviços permitem que cada parte seja desenvolvida, implantada e escalada de forma autônoma. Essa modularidade facilita a manutenção e a inovação, além de melhorar a escalabilidade e a resiliência do sistema

Quais são as principais vantagens e desvantagens dos microsserviços?
Liste ao menos duas vantagens e duas desvantagens de utilizar uma arquitetura de microsserviços em comparação a um sistema monolítico.
R: As principais vantagens dos microsserviços incluem:
1. Escalabilidade Independente: Cada serviço pode ser escalado conforme a demanda, otimizando recursos e melhorando o desempenho.
2. Agilidade no Desenvolvimento: Equipes podem trabalhar em serviços diferentes de forma autônoma, acelerando o ciclo de desenvolvimento e implantação.
As desvantagens são:
1. Complexidade de Gerenciamento: Gerenciar múltiplos serviços pode ser desafiador, exigindo ferramentas e práticas avançadas.
2. Consistência de Dados: Manter a consistência entre serviços independentes pode ser complicado, resultando em desafios de transações distribuídas.

Quais os diferentes tipos de serviços em uma arquitetura de microsserviços?
Identifique e descreva brevemente os diferentes tipos de serviços que podem ser encontrados em uma arquitetura de microsserviços.
R: Na arquitetura de microsserviços, diferentes tipos de serviços podem ser identificados:
1. Serviços de Negócio: Cada um implementa uma funcionalidade específica, como gerenciamento de usuários, processamento de pagamentos ou catálogo de produtos.
2. Serviços de Infraestrutura: Responsáveis por aspectos fundamentais como autenticação, monitoramento e gerenciamento de dados.
3. Serviços de Comunicação: Facilitam a interação entre microsserviços, utilizando APIs ou filas de mensagens para troca de informações.


O que são serviços de domínio e como eles se relacionam com o DDD (Domain-Driven Design)?
R: Serviços de domínio são componentes dentro do Domain-Driven Design (DDD) que encapsulam comportamentos e lógica de negócios que não pertencem a uma única entidade ou objeto de valor. Eles atuam em contextos complexos, orquestrando interações entre múltiplas entidades e agregações, sem manter estado próprio. Essa abordagem permite que a lógica de negócios seja organizada de forma mais clara e reutilizável, facilitando a manutenção e a evolução do sistema à medida que o domínio do negócio se desenvolve.

Qual é o propósito de dividir uma aplicação monolítica em serviços de negócio?
R: O propósito de dividir uma aplicação monolítica em serviços de negócio é aumentar a escalabilidade, permitindo que cada serviço seja escalado independentemente conforme a demanda. Além disso, essa divisão promove agilidade no desenvolvimento, permitindo que equipes trabalhem em diferentes serviços simultaneamente, acelerando o ciclo de entrega e facilitando atualizações. Essa abordagem também melhora a organização e a responsabilidade das equipes, resultando em sistemas mais flexíveis e resilientes.

Como o padrão Strangler pode ajudar na transição de um sistema monolítico para microsserviços?
R: O padrão Strangler é uma estratégia que facilita a transição de um sistema monolítico para microsserviços de forma gradual e segura. Ele permite que novos serviços sejam desenvolvidos e implementados ao lado do monolito existente, enquanto este é progressivamente descontinuado.
Esse método evita interrupções no funcionamento do negócio, permitindo que funcionalidades sejam transferidas aos poucos. À medida que os serviços são extraídos, a complexidade do monolito diminui, até que ele possa ser completamente substituído, resultando em uma arquitetura mais modular e flexível

Explique o padrão Sidecar e sua aplicação em arquiteturas de microsserviços.
R: O padrão Sidecar é uma abordagem em arquiteturas de microsserviços que envolve a implantação de um serviço auxiliar (sidecar) junto a um aplicativo principal, geralmente em contêineres. O sidecar fornece funcionalidades complementares, como monitoramento, autenticação e gerenciamento de configuração, sem modificar o código do aplicativo principal. Essa separação permite que o aplicativo seja mais leve e focado em sua lógica central, enquanto o sidecar lida com preocupações transversais. Essa estratégia facilita a escalabilidade e a manutenção, além de permitir a utilização de diferentes tecnologias para o sidecar, independentemente do aplicativo principal.

Quais são os principais desafios ao quebrar um monolito em microsserviços e como superá-los?
R: Os principais desafios ao quebrar um monolito em microsserviços incluem:
1. Complexidade de Gerenciamento: A transição para microsserviços aumenta a complexidade na gestão de múltiplos serviços interdependentes. Para superá-la, é crucial implementar práticas de DevOps e automação, como integração e entrega contínuas, que facilitam o gerenciamento e a implantação.
2. Consistência de Dados: Manter a consistência entre serviços distribuídos pode ser complicado, especialmente em transações. Uma abordagem eficaz é adotar contratos de API bem definidos e utilizar padrões como o Saga para gerenciar transações distribuídas.


O que é um API Gateway e quais são suas principais vantagens em uma arquitetura de microsserviços?
R: Um API Gateway é um ponto de entrada único que gerencia as interações entre clientes e microsserviços. Suas principais vantagens incluem simplificação do gerenciamento de APIs, controle de acesso centralizado, e a capacidade de agregar múltiplas solicitações em uma única chamada, reduzindo a complexidade para o cliente

Como o agregador de processos funciona e qual é seu papel ao integrar múltiplos serviços em uma única operação?
R: O agregador de processos permite que o API Gateway combine várias chamadas a serviços diferentes em uma única operação, enviando uma solicitação ao cliente e agregando as respostas. Isso otimiza a comunicação e reduz a latência.

Explique o Edge Pattern e quando é apropriado aplicá-lo em microsserviços.
R: O Edge Pattern é aplicado quando um API Gateway atua como a interface principal entre clientes e serviços, gerenciando autenticação, roteamento e outras funções transversais. É apropriado em cenários onde a segurança e a simplificação do acesso são prioritárias.

Quais são os cenários ideais para o uso de um API Gateway em comparação com a comunicação direta entre serviços?
R: Idealmente, um API Gateway deve ser usado quando há múltiplos microsserviços que precisam ser acessados por diferentes clientes ou quando se deseja centralizar autenticação e monitoramento, em vez de permitir comunicação direta entre serviços.

Quais são os principais desafios de gerenciar a comunicação entre serviços através de um API Gateway e como eles podem ser mitigados?
R: Os principais desafios incluem latência adicional e um ponto único de falha. Esses problemas podem ser mitigados através de monitoramento rigoroso, balanceamento de carga e implementações redundantes para garantir alta disponibilidade.


Por que é recomendado que cada serviço tenha seu próprio banco de dados em uma arquitetura de microsserviços?
R: Cada serviço deve ter seu próprio banco de dados para garantir independência e isolamento, evitando que mudanças em um serviço afetem outros e permitindo a escolha da tecnologia de armazenamento mais adequada para cada um.

Explique como o padrão CQRS (Command Query Responsibility Segregation) pode ajudar na gestão de dados em microsserviços.
R: O padrão CQRS (Command Query Responsibility Segregation) separa operações de leitura e escrita, permitindo otimizações específicas para cada tipo de operação, o que melhora a eficiência e a escalabilidade em microsserviços.

Quais são as vantagens e desafios de utilizar diferentes tipos de bancos de dados em uma mesma aplicação de microsserviços?
R: As vantagens incluem flexibilidade na escolha de tecnologias apropriadas e otimização para diferentes necessidades. Os desafios envolvem complexidade na gestão e na manutenção da consistência dos dados entre os serviços.

Como os eventos assíncronos podem ser utilizados para garantir a comunicação entre serviços sem comprometer a performance do sistema?
R: Eventos assíncronos permitem que serviços se comuniquem sem esperar por respostas imediatas, reduzindo a latência e aumentando a performance do sistema, pois serviços podem processar eventos em seu próprio ritmo.

Quais são os principais cuidados ao implementar eventos assíncronos em uma arquitetura de microsserviços?
R: É importante garantir a ordem dos eventos, lidar com falhas e garantir a consistência dos dados, além de monitorar as comunicações para evitar problemas de sincronização e latência excessiva.


Qual é a importância dos logs em uma arquitetura de microsserviços?
R: Os logs são essenciais para monitorar o comportamento da aplicação, diagnosticar problemas e garantir a observabilidade em um ambiente distribuído, permitindo a identificação rápida de falhas e a análise de desempenho.

Como os logs podem ser usados para rastrear uma stack trace em um ambiente com múltiplos microsserviços?
R: Logs centralizados facilitam o rastreamento de stack traces ao correlacionar eventos de diferentes serviços usando IDs de correlação, permitindo que desenvolvedores identifiquem rapidamente a origem de erros em sistemas complexos.

Explique a importância de agregar métricas em microsserviços e como isso pode ajudar na observabilidade do sistema.
R: Agregar métricas é crucial para a observabilidade, pois permite monitorar a saúde e o desempenho dos microsserviços, identificar gargalos e otimizar operações com base em dados analíticos.

Quais são os principais desafios ao lidar com logs distribuídos em uma arquitetura de microsserviços?
R: Os principais desafios incluem a dificuldade em centralizar e correlacionar logs de múltiplos serviços, além da complexidade na depuração. Esses problemas podem ser mitigados através de ferramentas de logging centralizado e práticas de padronização.

Como garantir que a coleta de métricas e logs não afete o desempenho dos microsserviços?
R: Para evitar impacto no desempenho, é recomendável usar técnicas assíncronas para coleta de dados, implementar buffers e limitar a quantidade de informações registradas, focando apenas em eventos significativos.

