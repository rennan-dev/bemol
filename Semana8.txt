---------------------------------------------------------------------------------------------------------------------------------------------

	Conhecendo o protocolo HTTP

1 - O que é HTTP e qual o seu papel na comunicação web?
R: HTTP significa hypertext transfer protocol, ele serve como um intermediário entre o cliente e o servidor, igual um carteiro entregando mensagens garantindo que a comunicação flua e seja eficiente.. 

2 - Explique a arquitetura do HTTP e os papéis do cliente (navegador) e do servidor (backend).
R: A arquitetura do HTTP é como um diálogo entre duas partes: o cliente e o servidor. Imagine que você está pedindo um livro na biblioteca. Você faz a solicitação(request) ao bibliotecário, o servidor, que te entrega o livro(response).
No caso o cliente seria o seu navegador, por exemplo o google chrome, e o servidor seria o computador que armazena as páginas da web que deseja acessar.
O navegador envia uma mensagem para o servidor pedindo um arquivo, como uma página HTML, um arquivo CSS ou uma imagem. O servidor recebe a mensagem, processa a solicitação e envia de volta a resposta, que pode ser o arquivo solicitado ou uma mensagem de erro.

3 - Quais são as camadas da arquitetura da internet e como o HTTP se relaciona com a camada de aplicação?
R: As duas primeiras são a Física e a de Enlace, depois a de Rede, Transporte e por fim, a de Aplicação.
E o HTTP se relaciona com a camada de aplicação definindo como as mensagens são formatadas e transmitidas, permitindo a troca de dados, como páginas web, entre navegadores e servidores.

4 - O que é um protocolo na comunicação entre dispositivos? Como o HTTP define as regras dessa "conversa"?
R: Um protocolo na comunicação entre dispositivos é como uma "língua" que ambos precisam falar e entender para trocar informações corretamente, seguindo regras para organizar essa conversa.
Sobre as regras, a primeira regra é que sempre deve haver duas entidades dialogando,um cliente e um servidor, o cliente sempre deve começar a conversa, após a requisição do cliente, o servidor mandará as informações solicitadas, o protocolo HTTP é baseado em mensagens de texto que seguem uma estrutura específica. Esse texto pode ser lido tanto por pessoas quanto por máquinas.

5 - Cite e explique um protocolo alternativo ao HTTP, como o P2P. Quais são as principais diferenças entre ele e o HTTP?
R: O modelo Cliente-Servidor tenta centralizar o trabalho no servidor, mas isso também pode gerar gargalos. Os clientes em P2P podem ajudar em tarefas que antes só eram executadas pelo servidor, agora cada cliente também é servidor e vice-versa.

---------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------

	Aprendendo sobre as URLs

1 - O que é uma URL e como ela é estruturada?
R: URL(Uniform Resource Locator, em português "Localizador de Recursos Universal").
O localizador nos permite acessar os recursos, que podem ser arquivos HTML, imagens, scripts de JavaScript que carregamos nas páginas, etc.

2 - Qual é a diferença entre uma URI e uma URL?
R: Uma URL é uma URI, mas nem todas as URI's são URL's! Existem URI's que identificam um recurso sem definir o endereço, nem o protocolo. Em outras palavras, uma URL representa uma identificação de um recurso (URI) através do endereço, mas nem todas as identificações são URL's.

3 - Qual é a porta padrão usada pelo HTTP e pelo HTTPS? E quais portas estão disponíveis para uso livre?
R: HTTP é a 80, HTTPS é a 443 e existem de 1023 até 65535 portas disponíveis.

4 - Como um endereço IP se transforma em um nome de domínio? Descreva o processo e o papel do DNS.
R: Um endereço IP se transforma em um nome de domínio através do DNS (Domain Name System). Quando você digita um domínio, o DNS converte esse nome em um endereço IP correspondente. O processo envolve a consulta a servidores DNS que armazenam essas associações, permitindo que os usuários usem nomes amigáveis, enquanto os dispositivos se comunicam usando endereços IP numéricos.

5 - Por que é importante escolher nomes de URLs que sejam fáceis de entender para qualquer pessoa?
R: Para facilitar a busca e melhorar a experiência do usuário ao invés dele ter que decorar endereços de IP para navegar na web.

---------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------

	Protegendo a Web com HTTPS

1 - O que é HTTPS e como ele difere do HTTP?
R: O HTTPS é a versão segura do HTTP. Ele usa um protocolo chamado TLS(Transport Layer Security) para criptografar a comunicação entre o navegador e o servidor. Isso significa que os dados que são enviados e recebidos estão protegidos de intrusos, como hackers.

2 - Qual é o papel do TLS no funcionamento do HTTPS?
R: O TLS (Transport Layer Security) é a chave para o HTTPS funcionar. Ele é como um guarda-costas que protege a comunicação entre o seu navegador e o servidor.

3 - Como funciona a criptografia assimétrica em transações cliente-servidor usando HTTPS?
R: Na criptografia assimétrica com HTTPS, o servidor envia sua chave pública ao cliente, que a usa para criptografar dados, como senhas. Apenas o servidor, com sua chave privada correspondente, pode descriptografar essa informação. Esse processo garante que, mesmo se interceptados, os dados permaneçam seguros, pois só o servidor tem a chave para decifrá-los.

4 - O que é criptografia simétrica e como ela se diferencia da criptografia assimétrica?
R: A criptografia simétrica usa a mesma chave para criptografar e descriptografar dados, sendo rápida e eficiente. Já a criptografia assimétrica usa um par de chaves: uma pública para criptografar e uma privada para descriptografar, proporcionando mais segurança. A principal diferença está na gestão das chaves: na simétrica, a chave precisa ser mantida secreta entre as partes; na assimétrica, a chave pública é compartilhada livremente.

5 - Por que a criptografia simétrica é considerada mais rápida que a assimétrica?
R: A criptografia simétrica é mais rápida porque usa algoritmos mais simples e processa blocos de dados de forma direta, com uma única chave para criptografia e descriptografia. Em contraste, a criptografia assimétrica envolve operações matemáticas mais complexas com dois pares de chaves, o que demanda mais poder computacional e tempo.

---------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------

	Controlando o HTTP

1 - Qual é a diferença principal entre os métodos GET e POST em termos de como os parâmetros são enviados?
R: No método GET, os parâmetros são enviados diretamente na URL, já no método POST, os parâmetros são enviados no corpo da mensagem, não ficam visíveis na URL.

2 - O que são Query Parameters e como eles são usados em uma requisição GET?
R: Query Parameters são uma forma de filtrar resultados através da requisição GET, por exemplo, se deseja pesquisar um filme em uma lista de filmes poderia filtrar por gênero.

3 - Como os dados são transmitidos no corpo de uma requisição POST?
R: o corpo de uma requisição POST é como uma caixa onde pode colocar os dados que deseja enviar para o servidor. Esses dados podem ser de vários tipos, como um formulário, um arquivo ou um JSON.

4 - Quais são as limitações do uso de parâmetros com o método GET?
R: O tamanho da URL, UTLs com muitos parâmetros podem ficar muito longas e difíceis de entender e ler, e também a segurança, os parâmetros do GET ficam visíveis na URL, o que pode ser um problema se estiver sendo enviado informações sensíveis, como senhas ou dados de cartão de crédito.

5 - Em que situações é preferível usar POST em vez de GET para enviar dados ao servidor?
R: É preferível usar o POST com dados grandes, que precisa ser enviado dados maiores como um arquivo ou um formulário com muitos campos, ou então para dados sensíveis como senha ou cartão de crédito e também ações que modificam o servidor, como criar um novo usuário ou atualizar um registro.

---------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------

	Inspecionando o protocolo HTTP

1 - Qual é o formato das mensagens HTTP e quais são suas principais partes?
R: As mensagens HTTP são compostas por duas partes principais, Header e Body.
Header é a primeira parte da mensagem e contém informações sobre a requisição ou resposta, como: Método, URL, Versão HTTP, Cabeçalhos de Requisição e Cabeçalhos de Resposta.
Body é a parte da mensagem que contém os dados da requisição ou resposta.

2 - Quais são os principais métodos HTTP e para que cada um deles é utilizado?
R: GET, serve para obter dados de um servidor;
POST, serve para enviar dados para um servidor;
PUT, serve para substituir um recurso existente no servidor;
DELETE, serve para excluir um dado ou recurso de um servidor;
PATCH, serve para atualizar parcialmente um recurso do servidor;
HEAD, usado para obter apenas o cabeçalho da resposta HTTP;
OPTIONS, usado para obter informações sobre as opções de requisição.

3 - O que significa dizer que um servidor HTTP é "stateless"?
R: um servidor HTTP é stateless quando ele não guarda informações sobre as requisições anteriores de um mesmo cliente, Cada requisição é tratada como um evento independente, sem nenhuma relação com as requisições anteriores.

4 - O que são Sessões e Cookies, e como eles ajudam a "lembrar" o servidor?
R: Sessões e Cookies são como pequenos "bilhetes" que o servidor usa para se lembrar do usuário, mesmo que o usuário navegue entre diferentes páginas do site.
Os cookies ajudam a lembrar a personalização de um site, como preferência de idioma, tema do site ou produtos visualizados, manter logado no site sem precisar digitar a senha novamente ou guardar itens em um site de compras.
Já as sessões cuidam da segurança e informações do usuário, por exemplo, guardar informações como nome, endereço, email e etc... Sessões também são usadas para verificar se o usuário está logado ou não, evitando que outros usuários acessem a sua conta, 

5 - Quais são os significados dos seguintes códigos de status HTTP: 200, 201, 401, 404, 403 e familia 500?
R: 200 OK: A requisição foi bem-sucedida e o servidor retornou o recurso solicitado;
201 Created: A requisição foi bem-sucedida e um novo recurso foi criado no servidor;
401 Unauthorized: A requisição não foi autorizada. É como se estivesse tentando entrar em um lugar que precise de senha, mas não soubesse a senha correta;
404 Not Found: O recurso solicitado não foi encontrado no servidor;
403 Forbidden: O servidor entendeu a requisição, mas se recusou a atendê-la, um local fechado para o público;
500 Internal Server Error: Ocorreu um erro no servidor que impediu o processamento da requisição.

---------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------

	Conhecendo as evoluções do HTTP

1 - Quais são as principais melhorias introduzidas pelo HTTP/2 em relação ao HTTP/1.x?
R: Uma das principais é a multiplexação que permite que várias requisições sejam enviadas e recebidas ao mesmo tempo em uma única conexão TCP. Isso significa que o navegador não precisa mais abrir várias conexões para cada requisição, o que agiliza o carregamento das páginas. Outra melhoria é a compactação de cabeçalho, que reduz o tamanho dos cabeçalhos HTTP, diminuindo o tempo de transmissão e liberando recursos da rede.

2 - Como a multiplexação de streams no HTTP/2 melhora a eficiência da comunicação em comparação ao HTTP/1.x?
R: Em vez de abrir uma nova conexão TCP para cada requisição, como no HTTP/1.x, o HTTP/2 usa uma única conexão para enviar e receber vários pedidos ao mesmo tempo. Isso significa que as páginas carregam mais rápido, pois os recursos são baixados em paralelo, e não um de cada vez.

3 - Qual é o papel da compressão de cabeçalhos no HTTP/2 e como isso beneficia a performance das requisições?
R: A compreesão de cabeçalhos reduz o tamanho dos dados que precisam ser transmitidos entre o servidor e o cliente. Isso significa que as requisições são mais rápidas, pois menos dados precisam ser enviados pela rede. Além disso, a compreesão de cabeçalhos também libera recursos da rede, pois menos dados precisam ser processados pelos servidores e pelos navegadores.

4 - Comente sobre o HTTP3 e quais evoluções ele traz.
R: O HTTP/3 é baseado no protocolo QUIC(Quick UDP Internet Connections), que é um protocolo de transporte mais moderno e eficiente que o TCP. O QUIC oferece algumas vantagens importantes em relação ao TCP, como conexão mais rápida, segurança integrada e multiplexação de streams.

---------------------------------------------------------------------------------------------------------------------------------------------
